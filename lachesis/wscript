top = '..'

def build(bld):
    lachesis_sources = [
        'src/config.cc',
        'src/device/device.cc',
        'src/device/device_hid.cc',
        'src/device/device_list.cc',
        'src/device/device_midi.cc',
        'src/device/device_monitor.cc',
        'src/device/device_monome.cc',
        'src/device/device_crow.cc',
        'src/osc.cc',
        'src/hardware/battery.cc',
        'src/hardware/i2c.cc',
        'src/hardware/input.cc',
        'src/hardware/io.cc',
        'src/hardware/platform.cc',
        'src/hardware/screen.cc',
        'src/hardware/stat.cc',
	'src/hardware/screen/fbdev.cc',
        'src/hardware/input/gpio.cc',
        'src/args.cc',
        'src/events.cc',
        'src/hello.cc',
        'src/input.cc',
        'src/lua_eval.cc',
        'src/main.cc',
        'src/metro.cc',
        'src/oracle.cc',
        'src/weaver.cc',
        'src/snd_file.cc',
        'src/system_cmd.cc',
        'src/clock.cc',
        'src/clocks/clock_internal.cc',
        'src/clocks/clock_midi.cc',
        'src/clocks/clock_crow.cc',
        'src/clocks/clock_scheduler.cc',
    ]

    if bld.env.NORNS_DESKTOP:
        lachesis_sources += [
            'src/hardware/screen/sdl.cc',
            'src/hardware/input/sdl.cc',
        ]

    lachesis_includes = [
        'src',
        'src/device',
        'src/hardware',
        'lua',
    ]

    lachesis_libs = [
        'pthread',
        'm',
    ]

    lachesis_use = [
        'ALSA',
        'LIBUDEV',
        'LIBEVDEV',
        'CAIRO',
        'CAIRO-FT',
        'LUA53',
        'LIBLO',
        'LIBMONOME',
        'SNDFILE',
        'AVAHI-COMPAT-LIBDNS_SD',
        'JACK',
    ]

    if bld.env.NORNS_DESKTOP:
        lachesis_libs.append('SDL2')
        lachesis_use.append('SDL2')

    if bld.env.ENABLE_ABLETON_LINK:
        lachesis_sources += ['src/clocks/clock_link.cc']
        lachesis_includes += ['../third-party/link-c']
        lachesis_libs += ['stdc++']
        lachesis_use += ['LIBLINK_C']

    if bld.env.PROFILE_MATRON:
      #bld.env.append_unique('CFLAGS', ['-pg'])
      bld.env.append_unique('CXXFLAGS', ['-pg'])
      bld.env.append_unique('LDFLAGS', ['-pg'])

    bld.program(features='cxx cxxprogram',
        source=lachesis_sources,
        target='lachesis',
        includes=lachesis_includes,
        use=lachesis_use,
        lib=lachesis_libs,
        cflags=['-O3', '-Wall'],
        ldflags=['-Wl,-export-dynamic'])
